import os
import zipfile
import torch
from torch import nn
from torch.utils.data import Dataset, DataLoader, random_split
from torchvision import transforms
from torchvision.io import read_image
from transformers import AutoModelForVideoClassification
from torch.nn.utils.rnn import pad_sequence
from sklearn.metrics import confusion_matrix
from PIL import Image
import numpy as np


# Specify the path to the zipped dataset
dataset_zip_path = '/user/HS400/g.00014/VISION/HMDB_simp.zip'

# Specify the destination folder to extract the dataset
extract_folder = '/user/HS400/g.00014/VISION'

# Extract the dataset
with zipfile.ZipFile(dataset_zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_folder)

class ActionVideoFramesDataset(Dataset):
    def __init__(self, root_dir, transform=None, max_frames=8):
        self.root_dir = root_dir
        self.transform = transform
        self.classes = sorted(os.listdir(root_dir))
        self.label_to_id_mapping = {label: id for id, label in enumerate(self.classes)}
        self.video_dirs = []

        for action_category in self.classes:
            category_video_dirs = sorted(os.listdir(os.path.join(self.root_dir, action_category)))
            self.video_dirs.append(category_video_dirs)

    def __len__(self):
        return len(self.classes) * 50

    def __getitem__(self, idx):
        action_category = self.classes[idx // 50]
        video_dir_name = self.video_dirs[idx // 50][idx % 50]
        video_dir = os.path.join(self.root_dir, action_category, video_dir_name)
        frames = sorted(os.listdir(video_dir))

        # Adjust the number of frames
        if len(frames) > self.max_frames:
            frames = frames[:self.max_frames]
        elif len(frames) < self.max_frames:
            # Perform frame duplication if needed
            frames.extend(frames[:self.max_frames - len(frames)])

        # Load and transform frames
        frames_list = []
        for frame in frames:
            image = Image.open(os.path.join(video_dir, frame))

            # Apply transforms
            if self.transform is not None:
                image = self.transform(image)

            frames_list.append(image)

        frames_tensor = torch.stack(frames_list).permute(3, 0, 1, 2)  # Reshape to (C, T, H, W)

        return frames_tensor, self.label_to_id_mapping[action_category]

# Transformation to apply to each frame
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Initialize the ActionVideoFramesDataset
dataset = ActionVideoFramesDataset('/user/HS400/g.00014/VISION/HMDB_simp', transform=transform)

# Split the dataset
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

# Dataloaders
train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=8, shuffle=False)

# Define the device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load the model
model = AutoModelForVideoClassification.from_pretrained("facebook/timesformer-base-finetuned-k400")

# Send model to device
model = model.to(device)

# Define the loss function
criterion = nn.CrossEntropyLoss()

# Define the optimizer
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Training
num_epochs = 10
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    correct_train = 0
    total_train = 0
    for i, data in enumerate(train_loader):
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)
        
        optimizer.zero_grad()

        # Forward pass
        outputs = model(inputs)
        
        # Calculate loss
        loss = criterion(outputs.logits, labels)
        
        # Backward pass and optimization
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

        _, predicted = torch.max(outputs.logits.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted == labels).sum().item()

    print(f"Epoch: {epoch+1}, Loss: {running_loss/len(train_loader)}")
    print(f"Training Accuracy: {correct_train/total_train*100}%")

    model.eval()
    running_loss = 0.0
    correct_val = 0
    total_val = 0
    with torch.no_grad():
        for i, data in enumerate(val_loader):
            inputs, labels = data
            inputs, labels = inputs.to(device), labels.to(device)
            
            outputs = model(inputs)
            
            loss = criterion(outputs.logits, labels)
            running_loss += loss.item()
            
            _, predicted = torch.max(outputs.logits.data, 1)
            total_val += labels.size(0)
            correct_val += (predicted == labels).sum().item()
            
    print(f"Validation Loss: {running_loss/len(val_loader)}")
    print(f"Validation Accuracy: {correct_val/total_val*100}%")

# Save the model
torch.save(model.state_dict(), '/user/HS400/g.00014/VISION/model.pth')

# Load the saved model
model.load_state_dict(torch.load('/user/HS400/g.00014/VISION/model.pth'))

# Top-5 Accuracy
top_5_correct = 0
total = 0
model.eval()
with torch.no_grad():
    for i, data in enumerate(val_loader):
        inputs, labels = data
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, predicted = outputs.logits.topk(5, 1)
        for i in range(predicted.shape[0]):
            if labels[i] in predicted[i]:
                top_5_correct += 1
        total += labels.size(0)
        
print(f"Top-5 Accuracy: {top_5_correct/total*100}%")
